// Code Generated by Sidekick is for learning and experimentation purposes only.
import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  TouchableWithoutFeedback,
  Keyboard,
} from 'react-native';
import AppTextField from '../Components/AppTextField';
import AppButton from '../Components/AppButton';
import {validEmail, validMobile, validPassword} from '../Utils/validation';
import strings from '../Constants/Strings';
import Toast from 'react-native-toast-message';
import {formatPhoneNumber} from '../Utils/Utils';
import {useAuth} from '../Context/AuthContext';
import mockApi from '../API/MockApi';
import apiManager from '../Utils/ApiManager';

const RegisterScreen = ({navigation}) => {
  const [fields, setFields] = useState({
    firstName: '',
    lastName: '',
    email: '',
    mobile: '',
    password: '',
  });
  // const [errors, setErrors] = useState({});
  const {login} = useAuth();

  const handlePhoneChange = (key, value) => {
    setFields(prevFields => ({
      ...prevFields,
      [key]: formatPhoneNumber(value),
    }));
  };

  const handleChange = (key, value) => {
    setFields({...fields, [key]: value});
    // setErrors({ ...errors, [key]: undefined });
  };

  const handleRegister = () => {
    // const validationErrors = validateRegisterFields(fields);

    /*if (!fields.firstName) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.firstNameRequired,
      });
      return;
    }

    if (!fields.lastName) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.lastNameRequired,
      });
      return;
    }

    if (!fields.email) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.emailRequired,
      });
      return;
    }

    if (!validEmail(fields.email)) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.emailInvalid,
      });
      return;
    }

    if (!fields.mobile) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.mobileumberRequired,
      });
      return;
    }

    if (!validMobile(fields.mobile)) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.mobileNumberInvalid,
      });
      return;
    }

    if (!fields.password) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.passwordRequired,
      });
      return;
    }

    if (!validPassword(fields.password)) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.passwordInvalid,
      });
      return;
    }

    login('dummy-token');*/

    console.log('handleRegister:');
    callRegisterApi();
    // Register a user
    /*mockApi
      .register({
        firstname: 'John',
        lastname: 'Doe',
        email: 'john@example.com',
        mobile: '1234567890',
        password: 'pass123',
      })
      .then(res => successRegisterCall(res));*/

    /*setErrors(validationErrors);
    if (Object.keys(validationErrors).length === 0) {
      // Registration logic here
      navigation.replace('Dashboard');
    }*/
  };

  // const handleRegister = async userData => {
  //   const response = await mockApi.register(userData);
  //   // Handle response (navigate, show message, etc.)
  // };

  const callRegisterApi = async () => {
    try {
      // reqres.in requires only email and password for registration
      const response = await apiManager.request({
        endpoint: '/register',
        method: 'POST',
        data: {
          email: 'eve.holt@reqres.in',
          password: 'pistol',
        },
      });
      console.log('Register Success:', response); // { id: 4, token: 'QpwL5tke4Pnpja7X4' }
    } catch (error) {
      console.error('Register Error:', error); // { error: 'Missing password' } or similar
    }
  };

  const successRegisterCall = response => {
    console.log('Fetch Register successRegisterCall:', response);
  };

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
      <View style={styles.container}>
        <Text style={styles.title}>Register</Text>
        <AppTextField
          placeholder="First Name"
          value={fields.firstName}
          onChangeText={val => handleChange('firstName', val)}
        />
        {/* {errors.firstName && <Text style={styles.errorText}>{errors.firstName}</Text>} */}
        <AppTextField
          placeholder="Last Name"
          value={fields.lastName}
          onChangeText={val => handleChange('lastName', val)}
        />
        {/* {errors.lastName && <Text style={styles.errorText}>{errors.lastName}</Text>} */}
        <AppTextField
          placeholder="Email Address"
          value={fields.email}
          onChangeText={val => handleChange('email', val)}
          keyboardType="email-address"
          autoCapitalize="none"
        />
        {/* {errors.email && <Text style={styles.errorText}>{errors.email}</Text>} */}
        <AppTextField
          placeholder="Mobile Number"
          value={fields.mobile}
          onChangeText={val => handlePhoneChange('mobile', val)}
          maxLength={14} // (123) 456-7890 is 14 chars
          keyboardType="numeric"
        />
        {/* {errors.mobile && <Text style={styles.errorText}>{errors.mobile}</Text>} */}
        <AppTextField
          placeholder="Password"
          value={fields.password}
          onChangeText={val => handleChange('password', val)}
          secureTextEntry
        />
        {/* {errors.password && <Text style={styles.errorText}>{errors.password}</Text>} */}
        <AppButton title="Register" onPress={handleRegister} />
        {/* <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backBtn}>
        <Text style={styles.backText}>Back</Text>
      </TouchableOpacity> */}
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Text style={styles.linkText}>
            Already have an account?{' '}
            <Text style={styles.linkHighlight}>Sign in</Text>
          </Text>
        </TouchableOpacity>
      </View>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 24,
    backgroundColor: '#f5f6fa',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#273c75',
    marginBottom: 32,
    alignSelf: 'center',
  },
  errorText: {color: '#e84118', fontSize: 13, marginBottom: 8, marginLeft: 4},
  backBtn: {alignSelf: 'flex-start', marginTop: 8},
  backText: {color: '#487eb0', fontSize: 15},
  linkText: {
    color: '#353b48',
    fontSize: 15,
    textAlign: 'center',
    marginTop: 16,
  },
  linkHighlight: {color: '#487eb0', fontWeight: 'bold'},
});

export default RegisterScreen;
