// Code Generated by Sidekick is for learning and experimentation purposes only.
import React, {useState, useEffect} from 'react';
import Toast from 'react-native-toast-message';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  TouchableWithoutFeedback,
  Keyboard,
} from 'react-native';
import AppTextField from '../Components/AppTextField';
import AppButton from '../Components/AppButton';
// import ForgotPasswordScreen from './ForgotPassword';
import {useAuth} from '../Context/AuthContext';
import colors from '../Constants/Constants';
import {validEmail} from '../Utils/validation';
import strings from '../Constants/Strings';
import mockApi from '../API/MockApi';
import apiManager from '../Utils/ApiManager';

const LoginScreen = ({navigation}) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  // const [errors, setErrors] = useState({});

  const {login, fetchApi} = useAuth();

  // const handleLogin = () => {
  //   // Replace with real authentication logic

  // };

  //   useEffect(() => {
  //   Toast.show({
  //     type: 'info',
  //     text1: 'Toast Test',
  //     text2: 'If you see this, Toast is working!',
  //   });
  // }, []);

  const handleLogin = () => {
    console.log('handleLogin LoginScreen');
    // console.warn("warn handleLogin LoginScreen");
    // Simple email regex for demonstration

    /*if (!email) {
      console.log('Please enter an email address');
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.emailRequired,
      });
      return;
    }

    if (!validEmail(email)) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.emailInvalid,
      });
      return;
    }

    if (!password) {
      Toast.show({
        type: strings.toastType.error,
        text1: strings.errorType.validationError,
        text2: strings.validation.passwordRequired,
      });
      return;
    }*/
    // Login with the same user
    callLoginApi();
    /*mockApi
      .login({
        email: 'john@example.com',
        password: 'pass123',
      })
      .then(res => {
        console.log('console.log:', res);
        successLoginCall(res);
      });*/

    // login('dummy-token');
    /*const validationErrors = validateFields(email, password);
    setErrors(validationErrors);
    if (Object.keys(validationErrors).length === 0) {
      // Proceed with login
      login('dummy-token');
      // navigation.replace('Dashboard');
    }*/
  };

  const callLoginApi = async () => {
    try {
      // reqres.in requires only email and password for login
      const response = await apiManager.request({
        endpoint: '/login',
        method: 'POST',
        data: {
          email: 'eve.holt@reqres.in',
          password: 'pistol', //'cityslicka',
        },
      });
      if (response.token != nil) {
        console.log('Login Success:', response);
      } else {
        console.log('response', response);
      }
      // { token: 'QpwL5tke4Pnpja7X4' }
    } catch (error) {
      console.error('Login Error:', error); // { error: 'user not found' } or similar
    }
  };

  const successLoginCall = response => {
    console.log('Fetch Login successLoginCall:', response);
  };

  // const handleLogin = async credentials => {
  //   const response = await mockApi.login(credentials);
  //   // Handle response (navigate, show error, etc.)
  // };

  /*const validateFields = (email, password) => {
  const errors = {};

  // Simple email regex for demonstration
  const emailRegex = /\S+@\S+\.\S+/;
  if (!email || !emailRegex.test(email)) {
    errors.email = 'Please enter a valid email address.';
  }

  if (!password) {
    errors.password = 'Password is required.';
  }

  return errors;
};*/

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
      <View style={styles.container}>
        <Text style={styles.title}>Personal Finance Tracker</Text>
        <AppTextField
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
        />
        {/* {errors.email ? <Text style={styles.errorText}>{errors.email}</Text> : null} */}
        <AppTextField
          placeholder="Password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />
        {/* {errors.password ? <Text style={styles.errorText}>{errors.password}</Text> : null} */}
        <TouchableOpacity
          style={{alignSelf: 'flex-end', marginBottom: 10}}
          onPress={() => navigation.navigate('ForgotPassword')}>
          <Text style={styles.forgotButtonText}>Forgot Password?</Text>
        </TouchableOpacity>
        <AppButton title="Login" onPress={handleLogin} />
        <TouchableOpacity onPress={() => navigation.navigate('Register')}>
          <Text style={styles.signupButtonText}>
            Don't have an account? Signup
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => navigation.navigate('Login')}
          style={{alignSelf: 'flex-end', marginTop: 16}}>
          <Text style={{color: colors.linkButtonColor, fontSize: 16}}>
            Already have an account?{' '}
            <Text style={{fontWeight: 'bold'}}>Sign in</Text>
          </Text>
        </TouchableOpacity>

        {/* <TouchableOpacity onPress={() => navigation.navigate('ForgotPassword')}>
        <Text style={styles.forgotText}>Forgot Password?</Text>
      </TouchableOpacity> */}
        {/* <Toast /> */}
      </View>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 24,
    backgroundColor: colors.background,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: colors.primary,
    marginBottom: 32,
    alignSelf: 'center',
  },
  signupButtonText: {
    color: colors.linkButtonColor,
    fontSize: 16,
    textAlign: 'center',
    marginTop: 8,
    fontWeight: '600',
    // backgroundColor:'red'
  },
  forgotButtonText: {
    color: colors.linkButtonColor,
    fontSize: 16,
    paddingHorizontal: 10,
    textAlign: 'right',
    fontWeight: '600',
    // marginTop: 8,
    // marginRight: 10,
    // backgroundColor:'red',
    // marginBottom: 8,
  },
  // errorText: {
  //   color: '#e84118',
  //   fontSize: 12,
  //   marginBottom: 10,
  //   marginLeft: 4,
  // },
});

export default LoginScreen;
